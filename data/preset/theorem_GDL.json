{
	"Theorems": {
		"line_addition(AB,BC)": {
			"body": {
				"1": {
					"premise": "Collinear(ABC)",
					"conclusion": [
						"Equal(LengthOfLine(AC),Add(LengthOfLine(AB),LengthOfLine(BC)))"
					]
				}
			},
			"notes": []
		},
		"angle_addition(ABC,CBD)": {
			"body": {
				"1": {
					"premise": "Angle(ABC)&Angle(CBD)",
					"conclusion": [
						"Equal(MeasureOfAngle(ABD),Add(MeasureOfAngle(ABC),MeasureOfAngle(CBD)))"
					]
				}
			},
			"notes": []
		},
		"flat_angle(ABC)": {
			"body": {
				"1": {
					"premise": "Collinear(ABC)",
					"conclusion": [
						"Equal(MeasureOfAngle(ABC),180)"
					]
				}
			},
			"notes": []
		},
		"adjacent_complementary_angle(AOB,BOC)": {
			"body": {
				"1": {
					"premise": "Angle(AOB)&Angle(BOC)&Collinear(AOC)",
					"conclusion": [
						"Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOC)),180)"
					]
				}
			},
			"notes": []
		},
		"midpoint_judgment(M,AB)": {
			"body": {
				"1": {
					"premise": "Collinear(AMB)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
					"conclusion": [
						"Midpoint(M,AB)"
					]
				}
			},
			"notes": []
		},
		"triangle_area_formula_common(AD,ABC)": {
			"body": {
				"1": {
					"premise": "IsAltitude(AD,ABC)",
					"conclusion": [
						"Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AD),LengthOfLine(BC),0.5))"
					]
				}
			},
			"notes": []
		},
		"triangle_area_formula_heron(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(AreaOfTriangle(ABC),Pow(Mul(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),0.5),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),0.5),LengthOfLine(AB)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),0.5),LengthOfLine(BC)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),0.5),LengthOfLine(CA))),0.5))"
					]
				}
			},
			"notes": []
		},
		"triangle_area_formula_sine(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AB),LengthOfLine(AC),Sin(MeasureOfAngle(CAB)),1/2))"
					]
				}
			},
			"notes": []
		},
		"triangle_perimeter_formula(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(PerimeterOfTriangle(ABC),Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CA)))"
					]
				}
			},
			"notes": []
		},
		"triangle_property_angle_sum(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA),MeasureOfAngle(CAB)),180)"
					]
				}
			},
			"notes": []
		},
		"triangle_property_equal_line_to_equal_angle(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
					"conclusion": [
						"Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
					]
				}
			},
			"notes": []
		},
		"triangle_property_equal_angle_to_equal_line(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
					"conclusion": [
						"Equal(LengthOfLine(AB),LengthOfLine(AC))"
					]
				}
			},
			"notes": []
		},
		"sine_theorem(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AB),Sin(MeasureOfAngle(ABC))),Mul(LengthOfLine(AC),Sin(MeasureOfAngle(BCA))))"
					]
				}
			},
			"notes": []
		},
		"cosine_theorem(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)",
					"conclusion": [
						"Equal(Add(Pow(LengthOfLine(BC),2),Mul(2,LengthOfLine(AB),LengthOfLine(AC),Cos(MeasureOfAngle(CAB)))),Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(AC),2)))"
					]
				}
			},
			"notes": []
		},
		"parallel_judgment_alternate_interior_angle(AB,CD)": {
			"body": {
				"1": {
					"premise": "Angle(BAD)&Angle(CDA)&Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				}
			},
			"notes": []
		},
		"parallel_judgment_ipsilateral_internal_angle(AB,CD)": {
			"body": {
				"1": {
					"premise": "Angle(BAC)&Angle(ACD)&Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				}
			},
			"notes": []
		},
		"parallel_judgment_corresponding_angle(AB,CD,E)": {
			"body": {
				"1": {
					"premise": "Angle(EAB)&Angle(ACD)&Collinear(EAC)&Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				},
				"2": {
					"premise": "Angle(BAC)&Angle(DCE)&Collinear(ACE)&Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				}
			},
			"notes": []
		},
		"parallel_judgment_par_par(AB,CD,EF)": {
			"body": {
				"1": {
					"premise": "Parallel(AB,CD)&Parallel(CD,EF)",
					"conclusion": [
						"Parallel(AB,EF)"
					]
				}
			},
			"notes": []
		},
		"parallel_judgment_per_per(AB,CD)": {
			"body": {
				"1": {
					"premise": "Perpendicular(BA,CA)&Perpendicular(AC,DC)",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				},
				"2": {
					"premise": "Perpendicular(CD,AD)&Perpendicular(BA,DA)",
					"conclusion": [
						"Parallel(AB,CD)"
					]
				}
			},
			"notes": []
		},
		"parallel_property_collinear_extend(AB,CD,M)": {
			"body": {
				"1": {
					"premise": "Collinear(AMB)&Parallel(AB,CD)",
					"conclusion": [
						"Parallel(AM,CD)",
						"Parallel(MB,CD)"
					]
				},
				"2": {
					"premise": "Collinear(MAB)&Parallel(AB,CD)",
					"conclusion": [
						"Parallel(MA,CD)",
						"Parallel(MB,CD)"
					]
				},
				"3": {
					"premise": "Collinear(ABM)&Parallel(AB,CD)",
					"conclusion": [
						"Parallel(AM,CD)",
						"Parallel(BM,CD)"
					]
				}
			},
			"notes": []
		},
		"parallel_property_alternate_interior_angle(AB,CD)": {
			"body": {
				"1": {
					"premise": "Parallel(AB,CD)&Line(AD)",
					"conclusion": [
						"Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))"
					]
				},
				"2": {
					"premise": "Parallel(AB,CD)&Line(BC)",
					"conclusion": [
						"Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))"
					]
				}
			},
			"notes": []
		},
		"parallel_property_ipsilateral_internal_angle(AB,CD)": {
			"body": {
				"1": {
					"premise": "Parallel(AB,CD)&Line(AC)",
					"conclusion": [
						"Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)"
					]
				}
			},
			"notes": []
		},
		"parallel_property_corresponding_angle(AB,CD,E)": {
			"body": {
				"1": {
					"premise": "Parallel(AB,CD)&Collinear(EAC)",
					"conclusion": [
						"Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))"
					]
				},
				"2": {
					"premise": "Parallel(AB,CD)&Collinear(ACE)",
					"conclusion": [
						"Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))"
					]
				}
			},
			"notes": []
		},
		"parallel_property_extend_perpendicular(AB,CD)": {
			"body": {
				"1": {
					"premise": "Parallel(AB,CD)&Perpendicular(AC,DC)",
					"conclusion": [
						"Perpendicular(BA,CA)"
					]
				},
				"2": {
					"premise": "Parallel(AB,CD)&Perpendicular(BA,CA)",
					"conclusion": [
						"Perpendicular(AC,DC)"
					]
				}
			},
			"notes": []
		},
		"intersect_property_vertical_angle(O,AB,CD)": {
			"body": {
				"1": {
					"premise": "Intersect(O,AB,CD)",
					"conclusion": [
						"Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD))"
					]
				}
			},
			"notes": []
		},
		"bisector_judgment_angle_equal(BD,ABC)": {
			"body": {
				"1": {
					"premise": "Angle(ABD)&Angle(DBC)&Equal(MeasureOfAngle(ABD),MeasureOfAngle(DBC))",
					"conclusion": [
						"Bisector(BD,ABC)"
					]
				}
			},
			"notes": []
		},
		"bisector_property_line_ratio(BD,ABC)": {
			"body": {
				"1": {
					"premise": "Bisector(BD,ABC)&Collinear(CDA)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(CD),LengthOfLine(BA)),Mul(LengthOfLine(DA),LengthOfLine(BC)))"
					]
				}
			},
			"notes": []
		},
		"median_judgment(AD,ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Midpoint(D,BC)&Line(AD)",
					"conclusion": [
						"Median(AD,ABC)"
					]
				}
			},
			"notes": []
		},
		"neutrality_judgment_parallel(DE,ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Collinear(ADB)&Collinear(AEC)&Parallel(DE,BC)",
					"conclusion": [
						"Neutrality(DE,ABC)"
					]
				}
			},
			"notes": []
		},
		"neutrality_property_angle_equal(DE,ABC)": {
			"body": {
				"1": {
					"premise": "Neutrality(DE,ABC)",
					"conclusion": [
						"Equal(MeasureOfAngle(ADE),MeasureOfAngle(ABC))",
						"Equal(MeasureOfAngle(DEA),MeasureOfAngle(BCA))"
					]
				}
			},
			"notes": []
		},
		"neutrality_property_line_ratio(DE,ABC)": {
			"body": {
				"1": {
					"premise": "Neutrality(DE,ABC)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AD),LengthOfLine(EC)),Mul(LengthOfLine(DB),LengthOfLine(AE)))"
					]
				}
			},
			"notes": []
		},
		"neutrality_property_similar(DE,ABC)": {
			"body": {
				"1": {
					"premise": "Neutrality(DE,ABC)",
					"conclusion": [
						"Similar(ABC,ADE)"
					]
				}
			},
			"notes": []
		},
		"is_altitude_judgment(AD,ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Collinear(BDC)&Line(AD)&(Equal(MeasureOfAngle(BDA),90)|Equal(MeasureOfAngle(ADC),90))",
					"conclusion": [
						"IsAltitude(AD,ABC)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Line(AD)&(Collinear(DBC)&Equal(MeasureOfAngle(ADB),90)|Collinear(BCD)&Equal(MeasureOfAngle(ACD),90))",
					"conclusion": [
						"IsAltitude(AD,ABC)"
					]
				}
			},
			"notes": []
		},
		"perpendicular_bisector_judgment_definition(AB,CO)": {
			"body": {
				"1": {
					"premise": "Collinear(AOB)&(Equal(MeasureOfAngle(AOC),90)|Equal(MeasureOfAngle(COB),90))&Equal(LengthOfLine(AO),LengthOfLine(OB))",
					"conclusion": [
						"PerpendicularBisector(AB,CO)"
					]
				}
			},
			"notes": []
		},
		"perpendicular_bisector_judgment_distance_equal(AB,CO)": {
			"body": {
				"1": {
					"premise": "Collinear(AOB)&(Equal(MeasureOfAngle(AOC),90)|Equal(MeasureOfAngle(COB),90))&Equal(LengthOfLine(CA),LengthOfLine(CB))",
					"conclusion": [
						"PerpendicularBisector(AB,CO)"
					]
				}
			},
			"notes": []
		},
		"perpendicular_bisector_property_distance_equal(AB,CO)": {
			"body": {
				"1": {
					"premise": "PerpendicularBisector(AB,CO)",
					"conclusion": [
						"Equal(LengthOfLine(CA),LengthOfLine(CB))"
					]
				}
			},
			"notes": []
		},
		"perpendicular_bisector_property_bisector(AB,CO)": {
			"body": {
				"1": {
					"premise": "PerpendicularBisector(AB,CO)&Angle(BCO)&Angle(OCA)",
					"conclusion": [
						"Bisector(CO,BCA)"
					]
				}
			},
			"notes": []
		},
		"perpendicular_judgment_angle(AO,CO)": {
			"body": {
				"1": {
					"premise": "Angle(AOC)&Equal(MeasureOfAngle(AOC),90)",
					"conclusion": [
						"Perpendicular(AO,CO)"
					]
				}
			},
			"notes": []
		},
		"perpendicular_property_collinear_extend(AO,CO,B)": {
			"body": {
				"1": {
					"premise": "Perpendicular(AO,CO)&Collinear(AOB)",
					"conclusion": [
						"Perpendicular(CO,BO)"
					]
				},
				"2": {
					"premise": "Perpendicular(AO,CO)&Collinear(BOC)",
					"conclusion": [
						"Perpendicular(BO,AO)"
					]
				},
				"3": {
					"premise": "Perpendicular(AO,CO)&(Collinear(ABO)|Collinear(BAO))",
					"conclusion": [
						"Perpendicular(BO,CO)"
					]
				},
				"4": {
					"premise": "Perpendicular(AO,CO)&(Collinear(OBC)|Collinear(OCB))",
					"conclusion": [
						"Perpendicular(AO,BO)"
					]
				}
			},
			"notes": []
		},
		"right_triangle_judgment_angle(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),90)",
					"conclusion": [
						"RightTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"right_triangle_judgment_pythagorean_inverse(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))",
					"conclusion": [
						"RightTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"right_triangle_property_pythagorean(ABC)": {
			"body": {
				"1": {
					"premise": "RightTriangle(ABC)",
					"conclusion": [
						"Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))"
					]
				}
			},
			"notes": []
		},
		"right_triangle_property_special_rt_30_60(ABC)": {
			"body": {
				"1": {
					"premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),30)|Equal(MeasureOfAngle(BCA),60))",
					"conclusion": [
						"Equal(LengthOfLine(AB),Mul(LengthOfLine(BC),1.7321))",
						"Equal(LengthOfLine(AC),Mul(LengthOfLine(BC),2))"
					]
				},
				"2": {
					"premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),60)|Equal(MeasureOfAngle(BCA),30))",
					"conclusion": [
						"Equal(LengthOfLine(BC),Mul(LengthOfLine(AB),1.7321))",
						"Equal(LengthOfLine(AC),Mul(LengthOfLine(AB),2))"
					]
				}
			},
			"notes": []
		},
		"right_triangle_property_special_rt_45_45(ABC)": {
			"body": {
				"1": {
					"premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),45)|Equal(MeasureOfAngle(BCA),45))",
					"conclusion": [
						"Equal(LengthOfLine(AB),LengthOfLine(BC))",
						"Equal(LengthOfLine(AC),Mul(LengthOfLine(AB),1.4142))"
					]
				}
			},
			"notes": []
		},
		"isosceles_triangle_judgment_angle_equal(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
					"conclusion": [
						"IsoscelesTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"isosceles_triangle_judgment_equilateral(ABC)": {
			"body": {
				"1": {
					"premise": "EquilateralTriangle(ABC)",
					"conclusion": [
						"IsoscelesTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"isosceles_triangle_judgment_line_equal(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
					"conclusion": [
						"IsoscelesTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"isosceles_triangle_property_angle_equal(ABC)": {
			"body": {
				"1": {
					"premise": "IsoscelesTriangle(ABC)",
					"conclusion": [
						"Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
					]
				}
			},
			"notes": []
		},
		"isosceles_triangle_property_line_coincidence(ABC,M)": {
			"body": {
				"1": {
					"premise": "IsoscelesTriangle(ABC)&IsAltitude(AM,ABC)",
					"conclusion": [
						"Median(AM,ABC)",
						"Bisector(AM,CAB)"
					]
				},
				"2": {
					"premise": "IsoscelesTriangle(ABC)&Median(AM,ABC)",
					"conclusion": [
						"IsAltitude(AM,ABC)",
						"Bisector(AM,CAB)"
					]
				},
				"3": {
					"premise": "IsoscelesTriangle(ABC)&Collinear(BMC)&Bisector(AM,CAB)",
					"conclusion": [
						"IsAltitude(AM,ABC)",
						"Median(AM,ABC)"
					]
				}
			},
			"notes": []
		},
		"equilateral_triangle_judgment_angle_equal(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(CAB))",
					"conclusion": [
						"EquilateralTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"equilateral_triangle_judgment_isos_and_angle(ABC)": {
			"body": {
				"1": {
					"premise": "IsoscelesTriangle(ABC)&(Equal(MeasureOfAngle(ABC),60)|Equal(MeasureOfAngle(BCA),60)|Equal(MeasureOfAngle(CAB),60))",
					"conclusion": [
						"EquilateralTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"equilateral_triangle_judgment_line_equal(ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(BC))&Equal(LengthOfLine(BC),LengthOfLine(AC))",
					"conclusion": [
						"EquilateralTriangle(ABC)"
					]
				}
			},
			"notes": []
		},
		"equilateral_triangle_property_angle(ABC)": {
			"body": {
				"1": {
					"premise": "EquilateralTriangle(ABC)",
					"conclusion": [
						"Equal(MeasureOfAngle(CAB),60)"
					]
				}
			},
			"notes": []
		},
		"equilateral_triangle_property_line_equal(ABC)": {
			"body": {
				"1": {
					"premise": "EquilateralTriangle(ABC)",
					"conclusion": [
						"Equal(LengthOfLine(AB),LengthOfLine(AC))"
					]
				}
			},
			"notes": []
		},
		"congruent_judgment_aas(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
					"conclusion": [
						"Congruent(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
					"conclusion": [
						"MirrorCongruent(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"congruent_judgment_asa(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
					"conclusion": [
						"Congruent(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
					"conclusion": [
						"MirrorCongruent(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"congruent_judgment_hl(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "RightTriangle(ABC)&RightTriangle(DEF)&Equal(LengthOfLine(AC),LengthOfLine(DF))&(Equal(LengthOfLine(AB),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))",
					"conclusion": [
						"Congruent(ABC,DEF)"
					]
				},
				"2": {
					"premise": "RightTriangle(BCA)&RightTriangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&(Equal(LengthOfLine(AC),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))",
					"conclusion": [
						"MirrorCongruent(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"congruent_judgment_sas(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DF))",
					"conclusion": [
						"Congruent(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DE))",
					"conclusion": [
						"MirrorCongruent(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"congruent_judgment_sss(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
					"conclusion": [
						"Congruent(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(FD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
					"conclusion": [
						"MirrorCongruent(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"congruent_property_angle_equal(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Congruent(ABC,DEF)",
					"conclusion": [
						"Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
					]
				},
				"2": {
					"premise": "MirrorCongruent(ABC,DEF)",
					"conclusion": [
						"Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
					]
				}
			},
			"notes": []
		},
		"congruent_property_area_equal(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Congruent(ABC,DEF)",
					"conclusion": [
						"Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
					]
				},
				"2": {
					"premise": "MirrorCongruent(ABC,DEF)",
					"conclusion": [
						"Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
					]
				}
			},
			"notes": []
		},
		"congruent_property_line_equal(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Congruent(ABC,DEF)",
					"conclusion": [
						"Equal(LengthOfLine(BC),LengthOfLine(EF))"
					]
				},
				"2": {
					"premise": "MirrorCongruent(ABC,DEF)",
					"conclusion": [
						"Equal(LengthOfLine(BC),LengthOfLine(EF))"
					]
				}
			},
			"notes": []
		},
		"congruent_property_perimeter_equal(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Congruent(ABC,DEF)",
					"conclusion": [
						"Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
					]
				},
				"2": {
					"premise": "MirrorCongruent(ABC,DEF)",
					"conclusion": [
						"Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
					]
				}
			},
			"notes": []
		},
		"similar_judgment_aa(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
					"conclusion": [
						"Similar(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
					"conclusion": [
						"MirrorSimilar(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"similar_judgment_sas(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
					"conclusion": [
						"Similar(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
					"conclusion": [
						"MirrorSimilar(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"similar_judgment_sss(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(DE),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(CA)))",
					"conclusion": [
						"Similar(ABC,DEF)"
					]
				},
				"2": {
					"premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(FD),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(FD),LengthOfLine(CA)))",
					"conclusion": [
						"MirrorSimilar(ABC,DEF)"
					]
				}
			},
			"notes": []
		},
		"similar_property_angle_equal(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Similar(ABC,DEF)",
					"conclusion": [
						"Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
					]
				},
				"2": {
					"premise": "MirrorSimilar(ABC,DEF)",
					"conclusion": [
						"Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
					]
				}
			},
			"notes": []
		},
		"similar_property_area_square_ratio(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Similar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(BC),LengthOfLine(BC),AreaOfTriangle(DEF)),Mul(LengthOfLine(EF),LengthOfLine(EF),AreaOfTriangle(ABC)))"
					]
				},
				"2": {
					"premise": "MirrorSimilar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(BC),LengthOfLine(BC),AreaOfTriangle(DEF)),Mul(LengthOfLine(EF),LengthOfLine(EF),AreaOfTriangle(ABC)))"
					]
				}
			},
			"notes": []
		},
		"similar_property_line_ratio(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Similar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))"
					]
				},
				"2": {
					"premise": "MirrorSimilar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))"
					]
				}
			},
			"notes": []
		},
		"similar_property_perimeter_ratio(ABC,DEF)": {
			"body": {
				"1": {
					"premise": "Similar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AB),PerimeterOfTriangle(DEF)),Mul(LengthOfLine(DE),PerimeterOfTriangle(ABC)))"
					]
				},
				"2": {
					"premise": "MirrorSimilar(ABC,DEF)",
					"conclusion": [
						"Equal(Mul(LengthOfLine(AB),PerimeterOfTriangle(DEF)),Mul(LengthOfLine(FD),PerimeterOfTriangle(ABC)))"
					]
				}
			},
			"notes": []
		},
		"circumcenter_judgment(O,ABC,D,E)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Collinear(ADB)&Collinear(CEA)&(PerpendicularBisector(AD,OD)|PerpendicularBisector(OD,BD))&(PerpendicularBisector(CE,OE)|PerpendicularBisector(OE,AE))",
					"conclusion": [
						"Circumcenter(O,ABC)"
					]
				}
			},
			"notes": []
		},
		"circumcenter_property_intersect(O,ABC,D)": {
			"body": {
				"1": {
					"premise": "Circumcenter(O,ABC)&Collinear(BDC)&(Perpendicular(BD,OD)|Perpendicular(OD,CD))",
					"conclusion": [
						"PerpendicularBisector(BC,OD)"
					]
				},
				"2": {
					"premise": "Circumcenter(O,ABC)&Midpoint(D,BC)",
					"conclusion": [
						"PerpendicularBisector(BC,OD)"
					]
				}
			},
			"notes": []
		},
		"circumcenter_property_line_equal(O,ABC)": {
			"body": {
				"1": {
					"premise": "Circumcenter(O,ABC)",
					"conclusion": [
						"Equal(LengthOfLine(OB),LengthOfLine(OC))"
					]
				}
			},
			"notes": []
		},
		"incenter_judgment(O,ABC)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Bisector(BO,ABC)&Bisector(CO,BCA)",
					"conclusion": [
						"Incenter(O,ABC)"
					]
				}
			},
			"notes": []
		},
		"incenter_property_intersect(O,ABC)": {
			"body": {
				"1": {
					"premise": "Incenter(O,ABC)",
					"conclusion": [
						"Bisector(AO,CAB)"
					]
				}
			},
			"notes": []
		},
		"incenter_property_line_equal(O,ABC,D,E)": {
			"body": {
				"1": {
					"premise": "Incenter(O,ABC)&Collinear(ADB)&Collinear(AEC)&(Perpendicular(AD,OD)|Perpendicular(OD,BD))&(Perpendicular(CE,OE)|Perpendicular(OE,AE))",
					"conclusion": [
						"Equal(LengthOfLine(OD),LengthOfLine(OE))"
					]
				}
			},
			"notes": []
		},
		"centroid_judgment(O,ABC,M,N)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&Median(CM,CAB)&Median(BN,BCA)&Collinear(COM)&Collinear(BON)",
					"conclusion": [
						"Centroid(O,ABC)"
					]
				}
			},
			"notes": []
		},
		"centroid_property_intersect(O,ABC,M)": {
			"body": {
				"1": {
					"premise": "Centroid(O,ABC)&Collinear(AOM)&Collinear(BMC)",
					"conclusion": [
						"Median(AM,ABC)"
					]
				}
			},
			"notes": []
		},
		"centroid_property_line_equal(O,ABC,M)": {
			"body": {
				"1": {
					"premise": "Centroid(O,ABC)&Collinear(AOM)&Collinear(BMC)",
					"conclusion": [
						"Equal(LengthOfLine(OA),Mul(LengthOfLine(OM),2))"
					]
				}
			},
			"notes": []
		},
		"orthocenter_judgment(O,ABC,D,E)": {
			"body": {
				"1": {
					"premise": "Triangle(ABC)&IsAltitude(CD,CAB)&IsAltitude(BE,BCA)&Collinear(COD)&Collinear(BOE)",
					"conclusion": [
						"Orthocenter(O,ABC)"
					]
				}
			},
			"notes": []
		},
		"orthocenter_property_intersect(O,ABC,D)": {
			"body": {
				"1": {
					"premise": "Orthocenter(O,ABC)&Collinear(AOD)&Collinear(BDC)",
					"conclusion": [
						"IsAltitude(AD,ABC)"
					]
				}
			},
			"notes": []
		},
		"orthocenter_property_angle(O,ABC)": {
			"body": {
				"1": {
					"premise": "Orthocenter(O,ABC)&Angle(COB)",
					"conclusion": [
						"Equal(MeasureOfAngle(COB),Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA)))"
					]
				}
			},
			"notes": []
		}
	},
	"Notes": {
		"built-in": [
			"No built-in theorems."
		],
		"fv_check/fv_check_mutex": "Two different forms of format validity check (FV check).",
		"ee_check": "For entity existence check (EE check). It only contains BasicEntity.",
		"extend": "For automatic extension of conditions. It only contains Entity or Relation. It usually used for the definition of predicate."
	}
}