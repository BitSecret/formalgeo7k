{
  "line_addition(AB,BC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(LengthOfLine(AC),Add(LengthOfLine(AB),LengthOfLine(BC)))"
      ]
    }
  },
  "angle_addition(ABC,CBD)": {
    "1": {
      "premise": "Angle(ABC)&Angle(CBD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABD),Add(MeasureOfAngle(ABC),MeasureOfAngle(CBD)))"
      ]
    }
  },
  "area_addition(BCA,ACD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Triangle(BCA)&Triangle(ACD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Add(AreaOfTriangle(BCA),AreaOfTriangle(ACD)))"
      ]
    },
    "2": {
      "premise": "Triangle(ABD)&Triangle(BCA)&Triangle(ACD)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABD),Add(AreaOfTriangle(BCA),AreaOfTriangle(ACD)))"
      ]
    }
  },
  "flat_angle(ABC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),180)"
      ]
    }
  },
  "adjacent_complementary_angle(AOB,BOC)": {
    "1": {
      "premise": "Angle(AOB)&Angle(BOC)&Collinear(AOC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOC)),180)"
      ]
    }
  },
  "vertical_angle(AOC,BOD)": {
    "1": {
      "premise": "Collinear(AOB)&Collinear(COD)",
      "conclusion": [
        "Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD))"
      ]
    }
  },
  "midpoint_judgment(M,AB)": {
    "1": {
      "premise": "Collinear(AMB)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
      "conclusion": [
        "IsMidpointOfLine(M,AB)"
      ]
    }
  },
  "triangle_area_formula_common(AD,ABC)": {
    "1": {
      "premise": "IsAltitudeOfTriangle(AD,ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(HeightOfTriangle(ABC),LengthOfLine(BC),1/2))"
      ]
    }
  },
  "triangle_area_formula_heron(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Sqrt(Mul(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(AB)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(BC)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(CA)))))"
      ]
    }
  },
  "triangle_area_formula_sine(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AB),LengthOfLine(AC),Sin(MeasureOfAngle(CAB)),1/2))"
      ]
    }
  },
  "triangle_perimeter_formula(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CA)))"
      ]
    }
  },
  "triangle_property_angle_sum(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA),MeasureOfAngle(CAB)),180)"
      ]
    }
  },
  "triangle_property_equal_line_to_equal_angle(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
      ]
    }
  },
  "triangle_property_equal_angle_to_equal_line(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
      "conclusion": [
        "Equal(LengthOfLine(AB),LengthOfLine(AC))"
      ]
    }
  },
  "sine_theorem(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(AB),Sin(MeasureOfAngle(ABC))),Mul(LengthOfLine(AC),Sin(MeasureOfAngle(BCA))))"
      ]
    }
  },
  "cosine_theorem(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(BC),2),Mul(2,LengthOfLine(AB),LengthOfLine(AC),Cos(MeasureOfAngle(CAB)))),Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(AC),2)))"
      ]
    }
  },
  "parallel_judgment_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAD)&Angle(CDA)&Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(CBA)&Angle(BCD)&Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAC)&Angle(ACD)&Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "Angle(EAB)&Angle(ACD)&Collinear(EAC)&Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(BAC)&Angle(DCE)&Collinear(ACE)&Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_par_par(AB,CD,EF)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&ParallelBetweenLine(CD,EF)",
      "conclusion": [
        "ParallelBetweenLine(AB,EF)"
      ]
    }
  },
  "parallel_judgment_per_per(AB,CD)": {
    "1": {
      "premise": "PerpendicularBetweenLine(BA,CA)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "PerpendicularBetweenLine(CD,AD)&PerpendicularBetweenLine(BA,DA)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_property_collinear_extend(AB,CD,M)": {
    "1": {
      "premise": "Collinear(AMB)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    },
    "2": {
      "premise": "Collinear(MAB)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(MA,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    },
    "3": {
      "premise": "Collinear(ABM)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(BM,CD)"
      ]
    }
  },
  "parallel_property_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AD)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(BC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))"
      ]
    }
  },
  "parallel_property_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)"
      ]
    }
  },
  "parallel_property_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(EAC)",
      "conclusion": [
        "Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(ACE)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))"
      ]
    }
  },
  "parallel_property_extend_perpendicular(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "PerpendicularBetweenLine(BA,CA)"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(BA,CA)",
      "conclusion": [
        "PerpendicularBetweenLine(AC,DC)"
      ]
    }
  },
  "bisector_judgment_angle_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABD)&Angle(DBC)&Equal(MeasureOfAngle(ABD),MeasureOfAngle(DBC))",
      "conclusion": [
        "IsBisectorOfAngle(BD,ABC)"
      ]
    }
  },
  "bisector_judgment_distance_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABC)&Line(BD)&PerpendicularBetweenLine(DA,BA)&PerpendicularBetweenLine(BC,DC)&Equal(LengthOfLine(DA),LengthOfLine(DC))",
      "conclusion": [
        "IsBisectorOfAngle(BD,ABC)"
      ]
    }
  },
  "bisector_property_line_ratio(BD,ABC)": {
    "1": {
      "premise": "IsBisectorOfAngle(BD,ABC)&Collinear(CDA)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(CD),LengthOfLine(BA)),Mul(LengthOfLine(DA),LengthOfLine(BC)))"
      ]
    }
  },
  "median_judgment(AD,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&IsMidpointOfLine(D,BC)&Line(AD)",
      "conclusion": [
        "IsMedianOfTriangle(AD,ABC)"
      ]
    }
  },
  "midsegment_property_similar(DE,ABC)": {
    "1": {
      "premise": "IsMidsegmentOfTriangle(DE,ABC)",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,ADE)"
      ]
    }
  },
  "altitude_judgment(AD,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Collinear(BDC)&Line(AD)&(Equal(MeasureOfAngle(BDA),90)|Equal(MeasureOfAngle(ADC),90))",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Line(AD)&(Collinear(DBC)&Equal(MeasureOfAngle(ADB),90)|Collinear(BCD)&Equal(MeasureOfAngle(ACD),90))",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    }
  },
  "perpendicular_bisector_judgment_per_and_mid(CO,AB)": {
    "1": {
      "premise": "Collinear(AOB)&(Equal(MeasureOfAngle(AOC),90)|Equal(MeasureOfAngle(COB),90))&Equal(LengthOfLine(AO),LengthOfLine(OB))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_judgment_distance_equal(CO,AB)": {
    "1": {
      "premise": "Collinear(AOB)&(Equal(MeasureOfAngle(AOC),90)|Equal(MeasureOfAngle(COB),90))&Equal(LengthOfLine(CA),LengthOfLine(CB))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_property_distance_equal(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)",
      "conclusion": [
        "Equal(LengthOfLine(CA),LengthOfLine(CB))"
      ]
    }
  },
  "perpendicular_bisector_property_bisector(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)&Angle(BCO)&Angle(OCA)",
      "conclusion": [
        "IsBisectorOfAngle(CO,BCA)"
      ]
    }
  },
  "perpendicular_judgment_angle(AO,CO)": {
    "1": {
      "premise": "Angle(AOC)&Equal(MeasureOfAngle(AOC),90)",
      "conclusion": [
        "PerpendicularBetweenLine(AO,CO)"
      ]
    }
  },
  "perpendicular_property_collinear_extend(AO,CO,B)": {
    "1": {
      "premise": "PerpendicularBetweenLine(AO,CO)&Collinear(AOB)",
      "conclusion": [
        "PerpendicularBetweenLine(CO,BO)"
      ]
    },
    "2": {
      "premise": "PerpendicularBetweenLine(AO,CO)&Collinear(BOC)",
      "conclusion": [
        "PerpendicularBetweenLine(BO,AO)"
      ]
    },
    "3": {
      "premise": "PerpendicularBetweenLine(AO,CO)&(Collinear(ABO)|Collinear(BAO))",
      "conclusion": [
        "PerpendicularBetweenLine(BO,CO)"
      ]
    },
    "4": {
      "premise": "PerpendicularBetweenLine(AO,CO)&(Collinear(OBC)|Collinear(OCB))",
      "conclusion": [
        "PerpendicularBetweenLine(AO,BO)"
      ]
    }
  },
  "right_triangle_judgment_angle(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),90)",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_judgment_pythagorean_inverse(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_property_pythagorean(ABC)": {
    "1": {
      "premise": "RightTriangle(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))"
      ]
    }
  },
  "right_triangle_property_special_rt_30_60(ABC)": {
    "1": {
      "premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),30)|Equal(MeasureOfAngle(BCA),60))",
      "conclusion": [
        "Equal(LengthOfLine(AB),Mul(LengthOfLine(BC),√3))",
        "Equal(LengthOfLine(AC),Mul(LengthOfLine(BC),2))"
      ]
    },
    "2": {
      "premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),60)|Equal(MeasureOfAngle(BCA),30))",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(AB),√3))",
        "Equal(LengthOfLine(AC),Mul(LengthOfLine(AB),2))"
      ]
    }
  },
  "right_triangle_property_special_rt_45_45(ABC)": {
    "1": {
      "premise": "RightTriangle(ABC)&(Equal(MeasureOfAngle(CAB),45)|Equal(MeasureOfAngle(BCA),45))",
      "conclusion": [
        "Equal(LengthOfLine(AB),LengthOfLine(BC))",
        "Equal(LengthOfLine(AC),Mul(LengthOfLine(AB),√2))"
      ]
    }
  },
  "isosceles_triangle_judgment_angle_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_judgment_line_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_property_angle_equal(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
      ]
    }
  },
  "isosceles_triangle_property_line_coincidence(ABC,M)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&IsAltitudeOfTriangle(AM,ABC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "2": {
      "premise": "IsoscelesTriangle(ABC)&IsMedianOfTriangle(AM,ABC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "3": {
      "premise": "IsoscelesTriangle(ABC)&Collinear(BMC)&IsBisectorOfAngle(AM,CAB)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "equilateral_triangle_judgment_angle_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(CAB))",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_judgment_isosceles_and_angle(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&(Equal(MeasureOfAngle(ABC),60)|Equal(MeasureOfAngle(BCA),60)|Equal(MeasureOfAngle(CAB),60))",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_judgment_line_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(BC))&Equal(LengthOfLine(BC),LengthOfLine(AC))",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_property_angle(ABC)": {
    "1": {
      "premise": "EquilateralTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),60)"
      ]
    }
  },
  "congruent_judgment_aas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_judgment_asa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(ABC)&RightTriangle(DEF)&Equal(LengthOfLine(AC),LengthOfLine(DF))&(Equal(LengthOfLine(AB),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "RightTriangle(ABC)&RightTriangle(EFD)&Equal(LengthOfLine(AC),LengthOfLine(DE))&(Equal(LengthOfLine(BC),LengthOfLine(EF))|Equal(LengthOfLine(AB),LengthOfLine(DF)))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DF))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(FD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_property_line_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    },
    "2": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    }
  },
  "congruent_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    },
    "2": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "congruent_property_area_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    },
    "2": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    }
  },
  "congruent_property_perimeter_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    },
    "2": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    }
  },
  "similar_judgment_parallel(ADE,ABC)": {
    "1": {
      "premise": "Triangle(ADE)&Triangle(ABC)&Collinear(ADB)&Collinear(AEC)&ParallelBetweenLine(DE,BC)",
      "conclusion": [
        "SimilarBetweenTriangle(ADE,ABC)"
      ]
    }
  },
  "similar_judgment_aa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(DE),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(CA)))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(FD),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(FD),LengthOfLine(CA)))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(ABC)&RightTriangle(DEF)&(Equal(Mul(LengthOfLine(AC),LengthOfLine(DE)),Mul(LengthOfLine(AB),LengthOfLine(DF)))|Equal(Mul(LengthOfLine(AC),LengthOfLine(EF)),Mul(LengthOfLine(BC),LengthOfLine(DF))))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "RightTriangle(BCA)&RightTriangle(DEF)&(Equal(Mul(LengthOfLine(AC),LengthOfLine(DF)),Mul(LengthOfLine(AB),LengthOfLine(DE)))|Equal(Mul(LengthOfLine(AC),LengthOfLine(EF)),Mul(LengthOfLine(BC),LengthOfLine(DE))))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_property_line_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    },
    "2": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    },
    "2": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "similar_property_area_square_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    },
    "2": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_property_perimeter_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    },
    "2": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "circumcenter_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "Triangle(ABC)&Collinear(ADB)&Collinear(CEA)&IsPerpendicularBisectorOfLine(OD,AB)&IsPerpendicularBisectorOfLine(OE,CA)",
      "conclusion": [
        "IsCircumcenterOfTriangle(O,ABC)"
      ]
    }
  },
  "circumcenter_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&(PerpendicularBetweenLine(BD,OD)|PerpendicularBetweenLine(OD,CD))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    },
    "2": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&IsMidpointOfLine(D,BC)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    }
  },
  "incenter_judgment_intersection(O,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&IsBisectorOfAngle(BO,ABC)&IsBisectorOfAngle(CO,BCA)",
      "conclusion": [
        "IsIncenterOfTriangle(O,ABC)"
      ]
    }
  },
  "incenter_property_intersection(O,ABC)": {
    "1": {
      "premise": "IsIncenterOfTriangle(O,ABC)",
      "conclusion": [
        "IsBisectorOfAngle(AO,CAB)"
      ]
    }
  },
  "centroid_judgment_intersection(O,ABC,M,N)": {
    "1": {
      "premise": "Triangle(ABC)&IsMedianOfTriangle(CM,CAB)&IsMedianOfTriangle(BN,BCA)&Collinear(COM)&Collinear(BON)",
      "conclusion": [
        "IsCentroidOfTriangle(O,ABC)"
      ]
    }
  },
  "centroid_property_intersection(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "centroid_property_line_equal(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "Equal(LengthOfLine(OA),Mul(LengthOfLine(OM),2))"
      ]
    }
  },
  "orthocenter_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "Triangle(ABC)&IsAltitudeOfTriangle(CD,CAB)&IsAltitudeOfTriangle(BE,BCA)&Collinear(COD)&Collinear(BOE)",
      "conclusion": [
        "IsOrthocenterOfTriangle(O,ABC)"
      ]
    }
  },
  "orthocenter_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Collinear(AOD)&Collinear(BDC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    }
  },
  "orthocenter_property_angle(O,ABC)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Angle(COB)",
      "conclusion": [
        "Equal(MeasureOfAngle(COB),Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA)))"
      ]
    }
  }
}