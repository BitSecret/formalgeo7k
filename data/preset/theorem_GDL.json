{
  "line_addition(AB,BC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(LengthOfLine(AC),Add(LengthOfLine(AB),LengthOfLine(BC)))"
      ]
    }
  },
  "angle_addition(ABC,CBD)": {
    "1": {
      "premise": "Angle(ABC)&Angle(CBD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABD),Add(MeasureOfAngle(ABC),MeasureOfAngle(CBD)))"
      ]
    }
  },
  "area_addition(BCA,ACD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Triangle(BCA)&Triangle(ACD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Add(AreaOfTriangle(BCA),AreaOfTriangle(ACD)))"
      ]
    },
    "2": {
      "premise": "Triangle(ABD)&Triangle(BCA)&Triangle(ACD)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABD),Add(AreaOfTriangle(BCA),AreaOfTriangle(ACD)))"
      ]
    }
  },
  "flat_angle(ABC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),180)"
      ]
    }
  },
  "adjacent_complementary_angle(AOB,BOC)": {
    "1": {
      "premise": "Angle(AOB)&Angle(BOC)&Collinear(AOC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOC)),180)"
      ]
    }
  },
  "vertical_angle(AOC,BOD)": {
    "1": {
      "premise": "Collinear(AOB)&Collinear(COD)",
      "conclusion": [
        "Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD))"
      ]
    }
  },
  "midpoint_judgment(M,AB)": {
    "1": {
      "premise": "Collinear(AMB)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
      "conclusion": [
        "IsMidpointOfLine(M,AB)"
      ]
    }
  },
  "parallel_judgment_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "Angle(EAB)&Angle(ACD)&Collinear(EAC)&Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(BAC)&Angle(DCE)&Collinear(ACE)&Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAD)&Angle(CDA)&Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(CBA)&Angle(BCD)&Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAC)&Angle(ACD)&Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_par_par(AB,CD,EF)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&ParallelBetweenLine(CD,EF)",
      "conclusion": [
        "ParallelBetweenLine(AB,EF)"
      ]
    }
  },
  "parallel_judgment_per_per(AB,CD)": {
    "1": {
      "premise": "PerpendicularBetweenLine(BA,CA)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "PerpendicularBetweenLine(CD,AD)&PerpendicularBetweenLine(BA,DA)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_property_collinear_extend(AB,CD,M)": {
    "1": {
      "premise": "Collinear(AMB)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    },
    "2": {
      "premise": "Collinear(MAB)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(MA,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    },
    "3": {
      "premise": "Collinear(ABM)&ParallelBetweenLine(AB,CD)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(BM,CD)"
      ]
    }
  },
  "parallel_property_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(EAC)",
      "conclusion": [
        "Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(ACE)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))"
      ]
    }
  },
  "parallel_property_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AD)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(BC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))"
      ]
    }
  },
  "parallel_property_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)"
      ]
    }
  },
  "parallel_property_par_per(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "PerpendicularBetweenLine(BA,CA)"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(BA,CA)",
      "conclusion": [
        "PerpendicularBetweenLine(AC,DC)"
      ]
    }
  },
  "perpendicular_judgment_angle(AO,CO)": {
    "1": {
      "premise": "Angle(AOC)&Equal(MeasureOfAngle(AOC),90)",
      "conclusion": [
        "PerpendicularBetweenLine(AO,CO)"
      ]
    }
  },
  "perpendicular_property_collinear_extend(AO,CO,B)": {
    "1": {
      "premise": "PerpendicularBetweenLine(AO,CO)&Collinear(AOB)",
      "conclusion": [
        "PerpendicularBetweenLine(CO,BO)"
      ]
    },
    "2": {
      "premise": "PerpendicularBetweenLine(AO,CO)&Collinear(BOC)",
      "conclusion": [
        "PerpendicularBetweenLine(BO,AO)"
      ]
    },
    "3": {
      "premise": "PerpendicularBetweenLine(AO,CO)&(Collinear(ABO)|Collinear(BAO))",
      "conclusion": [
        "PerpendicularBetweenLine(BO,CO)"
      ]
    },
    "4": {
      "premise": "PerpendicularBetweenLine(AO,CO)&(Collinear(OBC)|Collinear(OCB))",
      "conclusion": [
        "PerpendicularBetweenLine(AO,BO)"
      ]
    }
  },
  "bisector_judgment_angle_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABD)&Angle(DBC)&Equal(MeasureOfAngle(ABD),MeasureOfAngle(DBC))",
      "conclusion": [
        "IsBisectorOfAngle(BD,ABC)"
      ]
    }
  },
  "bisector_judgment_distance_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABC)&Line(BD)&PerpendicularBetweenLine(DA,BA)&PerpendicularBetweenLine(BC,DC)&Equal(LengthOfLine(DA),LengthOfLine(DC))",
      "conclusion": [
        "IsBisectorOfAngle(BD,ABC)"
      ]
    }
  },
  "bisector_property_distance_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABC)&Line(BD)&IsBisectorOfAngle(BD,ABC)&PerpendicularBetweenLine(DA,BA)&PerpendicularBetweenLine(BC,DC)",
      "conclusion": [
        "Equal(LengthOfLine(DA),LengthOfLine(DC))"
      ]
    }
  },
  "bisector_property_line_ratio(BD,ABC)": {
    "1": {
      "premise": "IsBisectorOfAngle(BD,ABC)&Collinear(CDA)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(CD),LengthOfLine(BA)),Mul(LengthOfLine(DA),LengthOfLine(BC)))"
      ]
    }
  },
  "perpendicular_bisector_judgment_per_and_mid(CO,AB)": {
    "1": {
      "premise": "(PerpendicularBetweenLine(AO,CO)|PerpendicularBetweenLine(CO,BO))&IsMidpointOfLine(O,AB)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_judgment_distance_equal(CO,AB)": {
    "1": {
      "premise": "Collinear(AOB)&(PerpendicularBetweenLine(AO,CO)|PerpendicularBetweenLine(CO,BO))&Equal(LengthOfLine(CA),LengthOfLine(CB))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_property_distance_equal(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)",
      "conclusion": [
        "Equal(LengthOfLine(CA),LengthOfLine(CB))"
      ]
    }
  },
  "perpendicular_bisector_property_bisector(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)&Angle(BCO)&Angle(OCA)",
      "conclusion": [
        "IsBisectorOfAngle(CO,BCA)"
      ]
    }
  },
  "circumcenter_of_triangle_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "Triangle(ABC)&Collinear(ADB)&Collinear(CEA)&IsPerpendicularBisectorOfLine(OD,AB)&IsPerpendicularBisectorOfLine(OE,CA)",
      "conclusion": [
        "IsCircumcenterOfTriangle(O,ABC)"
      ]
    }
  },
  "circumcenter_of_triangle_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&(PerpendicularBetweenLine(BD,OD)|PerpendicularBetweenLine(OD,CD))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    },
    "2": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&IsMidpointOfLine(D,BC)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    }
  },
  "incenter_of_triangle_judgment_intersection(O,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&IsBisectorOfAngle(BO,ABC)&IsBisectorOfAngle(CO,BCA)",
      "conclusion": [
        "IsIncenterOfTriangle(O,ABC)"
      ]
    }
  },
  "incenter_of_triangle_property_intersection(O,ABC)": {
    "1": {
      "premise": "IsIncenterOfTriangle(O,ABC)&Line(AO)",
      "conclusion": [
        "IsBisectorOfAngle(AO,CAB)"
      ]
    }
  },
  "centroid_of_triangle_judgment_intersection(O,ABC,M,N)": {
    "1": {
      "premise": "Triangle(ABC)&IsMedianOfTriangle(CM,CAB)&IsMedianOfTriangle(BN,BCA)&Collinear(COM)&Collinear(BON)",
      "conclusion": [
        "IsCentroidOfTriangle(O,ABC)"
      ]
    }
  },
  "centroid_of_triangle_property_intersection(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "centroid_of_triangle_property_line_equal(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "Equal(LengthOfLine(OA),Mul(LengthOfLine(OM),2))"
      ]
    }
  },
  "orthocenter_of_triangle_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "Triangle(ABC)&IsAltitudeOfTriangle(CD,CAB)&IsAltitudeOfTriangle(BE,BCA)&Collinear(COD)&Collinear(BOE)",
      "conclusion": [
        "IsOrthocenterOfTriangle(O,ABC)"
      ]
    }
  },
  "orthocenter_of_triangle_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Collinear(AOD)&Collinear(BDC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    }
  },
  "orthocenter_of_triangle_property_angle(O,ABC)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Angle(COB)",
      "conclusion": [
        "Equal(MeasureOfAngle(COB),Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA)))"
      ]
    }
  },
  "median_of_triangle_judgment(AD,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&IsMidpointOfLine(D,BC)&Line(AD)",
      "conclusion": [
        "IsMedianOfTriangle(AD,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_judgment_midpoint(DE,ABC)": {
    "1": {
      "premise": "Collinear(ADB)&Collinear(AEC)&Line(DE)&IsMidpointOfLine(D,AB)&IsMidpointOfLine(E,AC)",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_judgment_parallel(DE,ABC)": {
    "1": {
      "premise": "Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&(IsMidpointOfLine(D,AB)|IsMidpointOfLine(E,AC)|Equal(LengthOfLine(BC),Mul(LengthOfLine(DE),2)))",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_property_parallel(DE,ABC)": {
    "1": {
      "premise": "IsMidsegmentOfTriangle(DE,ABC)",
      "conclusion": [
        "ParallelBetweenLine(DE,BC)"
      ]
    }
  },
  "midsegment_of_triangle_property_similar(DE,ABC)": {
    "1": {
      "premise": "IsMidsegmentOfTriangle(DE,ABC)",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,ADE)",
        "Equal(RatioOfSimilarTriangle(ABC,ADE),2)"
      ]
    }
  },
  "altitude_of_triangle_judgment(AD,ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Collinear(BDC)&Line(AD)&(PerpendicularBetweenLine(BD,AD)|PerpendicularBetweenLine(AD,CD))",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    },
    "2": {
      "premise": "Triangle(ABC)&Line(AD)&(Collinear(DBC)&PerpendicularBetweenLine(AD,BD)|Collinear(BCD)&PerpendicularBetweenLine(AC,DC))",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    },
    "3": {
      "premise": "Triangle(ABC)&PerpendicularBetweenLine(AB,CB)",
      "conclusion": [
        "IsAltitudeOfTriangle(AB,ABC)"
      ]
    },
    "4": {
      "premise": "Triangle(ABC)&PerpendicularBetweenLine(BC,AC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AC,ABC)"
      ]
    }
  },
  "congruent_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(FD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DF))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_aas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_aas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_asa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_asa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(ABC)&RightTriangle(DEF)&Equal(LengthOfLine(AC),LengthOfLine(DF))&(Equal(LengthOfLine(AB),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(ABC)&RightTriangle(EFD)&Equal(LengthOfLine(AC),LengthOfLine(DE))&(Equal(LengthOfLine(BC),LengthOfLine(EF))|Equal(LengthOfLine(AB),LengthOfLine(DF)))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_property_line_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_line_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    }
  },
  "congruent_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "mirror_congruent_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "congruent_triangle_property_area_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_area_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    }
  },
  "congruent_triangle_property_perimeter_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_perimeter_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    }
  },
  "similar_triangle_judgment_parallel(ADE,ABC)": {
    "1": {
      "premise": "Triangle(ADE)&Triangle(ABC)&Collinear(ADB)&Collinear(AEC)&ParallelBetweenLine(DE,BC)",
      "conclusion": [
        "SimilarBetweenTriangle(ADE,ABC)"
      ]
    }
  },
  "similar_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(DE),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(CA)))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(FD),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(FD),LengthOfLine(CA)))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_aa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_aa(ABC,DEF)": {
    "1": {
      "premise": "Triangle(ABC)&Triangle(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(ABC)&RightTriangle(DEF)&(Equal(Mul(LengthOfLine(AC),LengthOfLine(DE)),Mul(LengthOfLine(AB),LengthOfLine(DF)))|Equal(Mul(LengthOfLine(AC),LengthOfLine(EF)),Mul(LengthOfLine(BC),LengthOfLine(DF))))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "RightTriangle(BCA)&RightTriangle(DEF)&(Equal(Mul(LengthOfLine(AC),LengthOfLine(DF)),Mul(LengthOfLine(AB),LengthOfLine(DE)))|Equal(Mul(LengthOfLine(AC),LengthOfLine(EF)),Mul(LengthOfLine(BC),LengthOfLine(DE))))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_property_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(Mul(RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(DEF,ABC)),1)"
      ]
    }
  },
  "mirror_similar_triangle_property_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(Mul(RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(DEF,ABC)),1)"
      ]
    }
  },
  "similar_triangle_property_line_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_property_line_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "mirror_similar_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "similar_triangle_property_area_square_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_property_area_square_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_triangle_property_perimeter_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_property_perimeter_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "circumcenter_of_quadrilateral_property_intersection(O,ABCD,E)": {
    "1": {
      "premise": "IsCircumcenterOfQuadrilateral(O,ABCD)&Collinear(BEC)&(PerpendicularBetweenLine(BE,OE)|PerpendicularBetweenLine(OE,CE))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OE,BC)"
      ]
    },
    "2": {
      "premise": "IsCircumcenterOfQuadrilateral(O,ABCD)&IsMidpointOfLine(E,BC)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OE,BC)"
      ]
    }
  },
  "incenter_of_quadrilateral_property_intersection(O,ABCD)": {
    "1": {
      "premise": "IsIncenterOfQuadrilateral(O,ABCD)&Line(AO)",
      "conclusion": [
        "IsBisectorOfAngle(AO,DAB)"
      ]
    }
  },
  "altitude_of_quadrilateral_judgment(EF,ABCD)": {
    "1": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Collinear(BFC)&Line(EF)&(PerpendicularBetweenLine(BF,EF)|PerpendicularBetweenLine(EF,CF))",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(EF,ABCD)"
      ]
    },
    "2": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&(Collinear(FBC)&PerpendicularBetweenLine(EF,BD)|Collinear(BCF)&PerpendicularBetweenLine(CF,EF))",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(EF,ABCD)"
      ]
    }
  },
  "diameter_of_circle_property_circumference_angle(AB,O,C)": {
    "1": {
      "premise": "IsDiameterOfCircle(AB,O)&Cocircular(O,C)&Angle(BCA)",
      "conclusion": [
        "Equal(MeasureOfAngle(BCA),90)"
      ]
    }
  },
  "chord_of_circle_property_intersection(AB,CD,O,E)": {
    "1": {
      "premise": "IsChordOfCircle(AB,O)&IsChordOfCircle(CD,O)&Collinear(AEB)&Collinear(CED)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(EC),LengthOfLine(ED)),Mul(LengthOfLine(EA),LengthOfLine(EB)))"
      ]
    }
  },
  "arc_of_circle_property_center_and_circumference_angle(AB,O,C)": {
    "1": {
      "premise": "IsDiameterOfCircle(AB,O)&Cocircular(O,ABC)&Angle(BOA)&Angle(BCA)",
      "conclusion": [
        "Equal(MeasureOfAngle(BOA),Mul(MeasureOfAngle(BCA),2))"
      ]
    }
  },
  "tangent_of_circle_judgment(AB,O,P)": {
    "1": {
      "premise": "Cocircular(O,P)&Line(AB)&(PerpendicularBetweenLine(AP,OP)|PerpendicularBetweenLine(OP,BP))",
      "conclusion": [
        "IsTangentOfCircle(AB,O,P)"
      ]
    }
  },
  "midsegment_of_trapezoid_judgment_midpoint(EF,ABCD)": {
    "1": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(DE)&IsMidpointOfLine(D,AB)&IsMidpointOfLine(F,DC)",
      "conclusion": [
        "IsMidsegmentOfTrapezoid(EF,ABCD)"
      ]
    }
  },
  "midsegment_of_trapezoid_judgment_parallel(EF,ABCD)": {
    "1": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(DE)&(ParallelBetweenLine(AD,EF)|ParallelBetweenLine(EF,BC))&(IsMidpointOfLine(E,AB)|IsMidpointOfLine(F,DC)|Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2)))",
      "conclusion": [
        "IsMidsegmentOfTrapezoid(EF,ABCD)"
      ]
    }
  },
  "midsegment_of_trapezoid_property_line(EF,ABCD)": {
    "1": {
      "premise": "IsMidsegmentOfTrapezoid(EF,ABCD)",
      "conclusion": [
        "Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2))"
      ]
    }
  },
  "midsegment_of_trapezoid_property_parallel(EF,ABCD)": {
    "1": {
      "premise": "IsMidsegmentOfTrapezoid(EF,ABCD)",
      "conclusion": [
        "ParallelBetweenLine(AD,EF)",
        "ParallelBetweenLine(EF,BC)"
      ]
    }
  },
  "triangle_property_angle_sum(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA),MeasureOfAngle(CAB)),180)"
      ]
    }
  },
  "sine_theorem(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(AB),Sin(MeasureOfAngle(ABC))),Mul(LengthOfLine(AC),Sin(MeasureOfAngle(BCA))))"
      ]
    }
  },
  "cosine_theorem(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(BC),2),Mul(2,LengthOfLine(AB),LengthOfLine(AC),Cos(MeasureOfAngle(CAB)))),Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(AC),2)))"
      ]
    }
  },
  "triangle_area_formula_common(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(HeightOfTriangle(ABC),LengthOfLine(BC),1/2))"
      ]
    }
  },
  "triangle_area_formula_sine(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AB),LengthOfLine(AC),Sin(MeasureOfAngle(CAB)),1/2))"
      ]
    }
  },
  "triangle_area_formula_heron(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Sqrt(Mul(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(AB)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(BC)),Sub(Mul(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(AC)),1/2),LengthOfLine(CA)))))"
      ]
    }
  },
  "triangle_perimeter_formula(ABC)": {
    "1": {
      "premise": "Triangle(ABC)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CA)))"
      ]
    }
  },
  "right_triangle_judgment_angle(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&PerpendicularBetweenLine(AB,CB)",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_judgment_pythagorean_inverse(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_property_pythagorean(ABC)": {
    "1": {
      "premise": "RightTriangle(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))"
      ]
    }
  },
  "isosceles_triangle_judgment_line_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_judgment_angle_equal(ABC)": {
    "1": {
      "premise": "Triangle(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_property_angle_equal(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
      ]
    }
  },
  "isosceles_triangle_property_line_coincidence(ABC,M)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&IsAltitudeOfTriangle(AM,ABC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "2": {
      "premise": "IsoscelesTriangle(ABC)&IsMedianOfTriangle(AM,ABC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "3": {
      "premise": "IsoscelesTriangle(ABC)&Collinear(BMC)&IsBisectorOfAngle(AM,CAB)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "equilateral_triangle_judgment_isosceles_and_isosceles(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&IsoscelesTriangle(BCA)",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_judgment_isosceles_and_angle(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&(Equal(MeasureOfAngle(ABC),60)|Equal(MeasureOfAngle(BCA),60)|Equal(MeasureOfAngle(CAB),60))",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_property_angle(ABC)": {
    "1": {
      "premise": "EquilateralTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),60)"
      ]
    }
  },
  "quadrilateral_property_angle_sum(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCD),MeasureOfAngle(CDA),MeasureOfAngle(DAB)),360)"
      ]
    }
  },
  "quadrilateral_perimeter_formula(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)",
      "conclusion": [
        "Equal(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CD),LengthOfLine(DA)),PerimeterOfQuadrilateral(ABCD))"
      ]
    }
  },
  "parallelogram_judgment_parallel_and_parallel(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&ParallelBetweenLine(AD,BC)&ParallelBetweenLine(BA,CD)",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_parallel_and_equal(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&ParallelBetweenLine(BA,CD)&Equal(LengthOfLine(BA),LengthOfLine(CD))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_equal_and_equal(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Equal(LengthOfLine(AD),LengthOfLine(BC))&Equal(LengthOfLine(BA),LengthOfLine(CD))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_angle_and_angle(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))&Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_diagonal_bisection(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Collinear(AOC)&Collinear(BOD)&IsMidpointOfLine(O,AC)&IsMidpointOfLine(O,BD)",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_property_opposite_line_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(LengthOfLine(BA),LengthOfLine(CD))"
      ]
    }
  },
  "parallelogram_property_opposite_angle_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))"
      ]
    }
  },
  "parallelogram_property_diagonal_bisection(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Collinear(AOC)&Collinear(BOD)",
      "conclusion": [
        "IsMidpointOfLine(O,AC)",
        "IsMidpointOfLine(O,BD)"
      ]
    }
  },
  "parallelogram_area_formula_common(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(HeightOfQuadrilateral(ABCD),LengthOfLine(BC)))"
      ]
    }
  },
  "parallelogram_area_formula_sine(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))"
      ]
    }
  },
  "kite_judgment_equal_and_equal(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(AD))&Equal(LengthOfLine(CB),LengthOfLine(CD))",
      "conclusion": [
        "Kite(ABCD)"
      ]
    }
  },
  "kite_property_diagonal_perpendicular_bisection(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)&Collinear(AOC)&Collinear(BOD)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(AO,BD)"
      ]
    }
  },
  "kite_property_opposite_angle_equal(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))"
      ]
    }
  },
  "kite_area_formula_diagonal(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)&Line(BD)&Line(AC)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(BD),LengthOfLine(AC),1/2))"
      ]
    }
  },
  "kite_area_formula_sine(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))"
      ]
    }
  },
  "rectangle_judgment_right_angle(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&PerpendicularBetweenLine(AB,CB)",
      "conclusion": [
        "Rectangle(ABCD)"
      ]
    }
  },
  "rectangle_judgment_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))",
      "conclusion": [
        "Rectangle(ABCD)"
      ]
    }
  },
  "rectangle_property_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Rectangle(ABCD)&Line(AC)&Line(BD)",
      "conclusion": [
        "Equal(LengthOfLine(AC),LengthOfLine(BD))"
      ]
    }
  },
  "rhombus_judgment_parallelogram_and_kite(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Kite(ABCD)",
      "conclusion": [
        "Rhombus(ABCD)"
      ]
    }
  },
  "square_judgment_rhombus_and_rectangle(ABCD)": {
    "1": {
      "premise": "Rhombus(ABCD)&Rectangle(ABCD)",
      "conclusion": [
        "Square(ABCD)"
      ]
    }
  },
  "trapezoid_judgment_parallel(ABCD)": {
    "1": {
      "premise": "Quadrilateral(ABCD)&ParallelBetweenLine(AD,BC)",
      "conclusion": [
        "Trapezoid(ABCD)"
      ]
    }
  },
  "trapezoid_area_formula(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(Add(LengthOfLine(AD),LengthOfLine(BC)),HeightOfQuadrilateral(ABCD),1/2))"
      ]
    }
  },
  "right_trapezoid_judgment_right_angle(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&(PerpendicularBetweenLine(DA,BA)|PerpendicularBetweenLine(AB,CB))",
      "conclusion": [
        "RightTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_judgment_line_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(CD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_judgment_angle_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_judgment_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_property_angle_equal(ABCD)": {
    "1": {
      "premise": "IsoscelesTrapezoid(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))"
      ]
    }
  },
  "isosceles_trapezoid_property_diagonal_equal(ABCD)": {
    "1": {
      "premise": "IsoscelesTrapezoid(ABCD)",
      "conclusion": [
        "Equal(LengthOfLine(AC),LengthOfLine(BD))"
      ]
    }
  },
  "arc_length_formula(OAB)": {
    "1": {
      "premise": "Arc(OAB)&Angle(BOA)",
      "conclusion": [
        "Equal(LengthOfArc(OAB),Mul(MeasureOfAngle(BOA),1/180*π,LengthOfRadius(O)))"
      ]
    }
  },
  "sector_perimeter_formula(OAB)": {
    "1": {
      "premise": "Sector(OAB)",
      "conclusion": [
        "Equal(PerimeterOfSector(OAB),Add(LengthOfRadius(O),LengthOfRadius(O),LengthOfArc(OAB)))"
      ]
    }
  },
  "sector_area_formula(OAB)": {
    "1": {
      "premise": "Sector(OAB)",
      "conclusion": [
        "Equal(AreaOfSector(OAB),Mul(MeasureOfAngle(BOA),1/360*π,LengthOfRadius(O),LengthOfRadius(O)))"
      ]
    }
  },
  "circle_perimeter_formula(O)": {
    "1": {
      "premise": "Circle(O)",
      "conclusion": [
        "Equal(PerimeterOfCircle(O),Mul(2*π,LengthOfRadius(O)))"
      ]
    }
  },
  "circle_area_formula(O)": {
    "1": {
      "premise": "Circle(O)",
      "conclusion": [
        "Equal(AreaOfCircle(O),Mul(π,LengthOfRadius(O),LengthOfRadius(O)))"
      ]
    }
  }
}